name: yaml-$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
   include:
     - main

pool:
  vmImage: windows-latest

variables:
- name: BuildParameters.RestoreBuildProjects
  value: './src/**/*.csproj'

- name: BuildParameters.TestProjects
  value: './src/**/*[Tt]ests/*.csproj'

- name: BuildConfiguration
  value: 'Release'

- name: serviceConnection
  value: 'Azure Subs'

- name: validationEnvironmentName
  value: 'DIValidationEnvironment'

- name: productionEnvironmentName
  value: 'DIProductionEnvironment'

- name: resourceGroup
  value: 'DataInkWebWindows'

- name: webAppName
  value: 'DataInkWeb'

- name: validationSlotName
  value: 'staging'

- name: stagingSlotName
  value: 'staging'

-  name: isMain
   value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]  # Set to true only for the main branch

stages:
  - stage: build
    jobs:
    - job: CI
      displayName: CI
      steps:
      - checkout: self
        fetchDepth: 1

      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: 'restore'
          projects: '$(BuildParameters.RestoreBuildProjects)'
          feedsToUse: 'select'

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          command: 'build'
          projects: '$(BuildParameters.RestoreBuildProjects)'
          arguments: '--configuration $(BuildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: "Running Tests"
        inputs:
          command: 'test'
          projects: '$(BuildParameters.TestProjects)'
          arguments: '--configuration $(buildConfiguration) --collect:"Code Coverage"'

    - job: Publish
      displayName: Publish
      dependsOn: CI
      steps:
      - checkout: self
        fetchDepth: 1

      - task: DotNetCoreCLI@2
        displayName: Production Complilation
        inputs:
          command: 'publish'
          publishWebProjects: true
          arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'

      - task: PublishPipelineArtifact@1
        displayName: Upload Artifact
        condition: succeededOrFailed()
        inputs:
          targetPath: '$(build.artifactstagingdirectory)'
          artifact: 'app'
          publishLocation: 'pipeline'

  - stage: deployToValidation
    jobs:
      - deployment: DeployToStaging
        displayName: 'Deploy To ${{ variables.validationSlotName }} slot'
        environment: $(validationEnvironmentName)
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: tree
                  displayName: Where Am I
                  workingDirectory: $(Agent.BuildDirectory)

                - task: AzureRmWebAppDeployment@4
                  displayName: Deploy App To Test
                  inputs:
                    ConnectionType: 'AzureRM'
                    azureSubscription: '$(serviceConnection)'
                    appType: 'webAppLinux'
                    WebAppName: '$(webAppName)'
                    deployToSlotOrASE: true
                    ResourceGroupName: '$(resourceGroup)'
                    SlotName: '$(validationSlotName)'
                    packageForLinux: '$(Agent.BuildDirectory)/app/*.zip'

  - stage: deployToProd
    condition: and(succeeded(), eq(variables.isMain, 'true'))
    dependsOn: deployToValidation
    jobs:
      - deployment: webDeployToProd
        displayName: Deploy To Prod
        environment: $(productionEnvironmentName)
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzureRmWebAppDeployment@4
                inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: '$(serviceConnection)'
                  appType: 'webApp'
                  WebAppName: '$(webAppName)'
                  deployToSlotOrASE: true
                  ResourceGroupName: '$(resourceGroup)'
                  SlotName: '$(stagingSlotName)'
                  packageForLinux: '$(Agent.BuildDirectory)/app/*.zip'

              - task: AzureAppServiceManage@0
                inputs:
                  azureSubscription: '$(serviceConnection)'
                  Action: 'Swap Slots'
                  WebAppName: '$(webAppName)'
                  ResourceGroupName: '$(resourceGroup)'
                  SourceSlot: '$(stagingSlotName)' 